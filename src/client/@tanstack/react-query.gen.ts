// This file is auto-generated by @hey-api/openapi-ts

import {
    type InfiniteData,
    infiniteQueryOptions,
    queryOptions,
} from '@tanstack/react-query'
import type { AxiosError } from 'axios'

import { client } from '../client.gen'
import {
    getTranslationMetadataApiTranslationsTranslationIdMetadataGet,
    getTranslationsApiTranslationsGet,
    getVersesApiVersesGet,
    healthHealthGet,
    type Options,
} from '../sdk.gen'
import type {
    GetTranslationMetadataApiTranslationsTranslationIdMetadataGetData,
    GetTranslationsApiTranslationsGetData,
    GetVersesApiVersesGetData,
    GetVersesApiVersesGetError,
    GetVersesApiVersesGetResponse,
    HealthHealthGetData,
} from '../types.gen'

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string
        _infinite?: boolean
        tags?: ReadonlyArray<string>
    },
]

const createQueryKey = <TOptions extends Options>(
    id: string,
    options?: TOptions,
    infinite?: boolean,
    tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
    const params: QueryKey<TOptions>[0] = {
        _id: id,
        baseURL:
            options?.baseURL || (options?.client ?? client).getConfig().baseURL,
    } as QueryKey<TOptions>[0]
    if (infinite) {
        params._infinite = infinite
    }
    if (tags) {
        params.tags = tags
    }
    if (options?.body) {
        params.body = options.body
    }
    if (options?.headers) {
        params.headers = options.headers
    }
    if (options?.path) {
        params.path = options.path
    }
    if (options?.query) {
        params.query = options.query
    }
    return [params]
}

export const healthHealthGetQueryKey = (
    options?: Options<HealthHealthGetData>,
) => createQueryKey('healthHealthGet', options)

/**
 * Health
 */
export const healthHealthGetOptions = (
    options?: Options<HealthHealthGetData>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthHealthGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            })
            return data
        },
        queryKey: healthHealthGetQueryKey(options),
    })
}

export const getTranslationsApiTranslationsGetQueryKey = (
    options?: Options<GetTranslationsApiTranslationsGetData>,
) => createQueryKey('getTranslationsApiTranslationsGet', options)

/**
 * Get Translations
 */
export const getTranslationsApiTranslationsGetOptions = (
    options?: Options<GetTranslationsApiTranslationsGetData>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTranslationsApiTranslationsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            })
            return data
        },
        queryKey: getTranslationsApiTranslationsGetQueryKey(options),
    })
}

export const getTranslationMetadataApiTranslationsTranslationIdMetadataGetQueryKey =
    (
        options: Options<GetTranslationMetadataApiTranslationsTranslationIdMetadataGetData>,
    ) =>
        createQueryKey(
            'getTranslationMetadataApiTranslationsTranslationIdMetadataGet',
            options,
        )

/**
 * Get Translation Metadata
 * Get complete metadata for a translation including:
 * - All books with their IDs, names, and display_name names
 * - Chapter counts per book
 * - Verse counts per chapter
 * - Total statistics
 */
export const getTranslationMetadataApiTranslationsTranslationIdMetadataGetOptions =
    (
        options: Options<GetTranslationMetadataApiTranslationsTranslationIdMetadataGetData>,
    ) => {
        return queryOptions({
            queryFn: async ({ queryKey, signal }) => {
                const { data } =
                    await getTranslationMetadataApiTranslationsTranslationIdMetadataGet(
                        {
                            ...options,
                            ...queryKey[0],
                            signal,
                            throwOnError: true,
                        },
                    )
                return data
            },
            queryKey:
                getTranslationMetadataApiTranslationsTranslationIdMetadataGetQueryKey(
                    options,
                ),
        })
    }

export const getVersesApiVersesGetQueryKey = (
    options: Options<GetVersesApiVersesGetData>,
) => createQueryKey('getVersesApiVersesGet', options)

/**
 * Get Verses
 * Unified endpoint for Bible verse retrieval with flexible filtering.
 *
 * **Features:**
 * - Text search with `q` parameter (exact or normalized matching)
 * - Point retrieval using `book`, `chapter`, `verse` parameters
 * - Range retrieval using `from_*` and `to_*` parameters
 * - Combine search with location constraints
 * - Optional match highlighting
 *
 * **Parameter Types (mutually exclusive):**
 * - Point queries: Use `book` [+ `chapter`] [+ `verse`]
 * - Range queries: Use `from_book` + `to_*` parameters
 *
 * **Examples:**
 * - Search: `/api/verses?translation_id=eng-kjv&q=love`
 * - Single verse: `/api/verses?translation_id=eng-kjv&book=john&chapter=3&verse=16`
 * - Full chapter: `/api/verses?translation_id=eng-kjv&book=john&chapter=3`
 * - Full book: `/api/verses?translation_id=eng-kjv&book=john`
 * - Verse range: `/api/verses?translation_id=eng-kjv&from_book=john&from_chapter=3&from_verse=16&to_verse=18`
 * - Chapter range: `/api/verses?translation_id=eng-kjv&from_book=john&from_chapter=3&to_chapter=5`
 * - Search in chapter: `/api/verses?translation_id=eng-kjv&book=john&chapter=3&q=love`
 */
export const getVersesApiVersesGetOptions = (
    options: Options<GetVersesApiVersesGetData>,
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVersesApiVersesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            })
            return data
        },
        queryKey: getVersesApiVersesGetQueryKey(options),
    })
}

const createInfiniteParams = <
    K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
    queryKey: QueryKey<Options>,
    page: K,
) => {
    const params = {
        ...queryKey[0],
    }
    if (page.body) {
        params.body = {
            ...(queryKey[0].body as any),
            ...(page.body as any),
        }
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers,
        }
    }
    if (page.path) {
        params.path = {
            ...(queryKey[0].path as any),
            ...(page.path as any),
        }
    }
    if (page.query) {
        params.query = {
            ...(queryKey[0].query as any),
            ...(page.query as any),
        }
    }
    return params as unknown as typeof page
}

export const getVersesApiVersesGetInfiniteQueryKey = (
    options: Options<GetVersesApiVersesGetData>,
): QueryKey<Options<GetVersesApiVersesGetData>> =>
    createQueryKey('getVersesApiVersesGet', options, true)

/**
 * Get Verses
 * Unified endpoint for Bible verse retrieval with flexible filtering.
 *
 * **Features:**
 * - Text search with `q` parameter (exact or normalized matching)
 * - Point retrieval using `book`, `chapter`, `verse` parameters
 * - Range retrieval using `from_*` and `to_*` parameters
 * - Combine search with location constraints
 * - Optional match highlighting
 *
 * **Parameter Types (mutually exclusive):**
 * - Point queries: Use `book` [+ `chapter`] [+ `verse`]
 * - Range queries: Use `from_book` + `to_*` parameters
 *
 * **Examples:**
 * - Search: `/api/verses?translation_id=eng-kjv&q=love`
 * - Single verse: `/api/verses?translation_id=eng-kjv&book=john&chapter=3&verse=16`
 * - Full chapter: `/api/verses?translation_id=eng-kjv&book=john&chapter=3`
 * - Full book: `/api/verses?translation_id=eng-kjv&book=john`
 * - Verse range: `/api/verses?translation_id=eng-kjv&from_book=john&from_chapter=3&from_verse=16&to_verse=18`
 * - Chapter range: `/api/verses?translation_id=eng-kjv&from_book=john&from_chapter=3&to_chapter=5`
 * - Search in chapter: `/api/verses?translation_id=eng-kjv&book=john&chapter=3&q=love`
 */
export const getVersesApiVersesGetInfiniteOptions = (
    options: Options<GetVersesApiVersesGetData>,
) => {
    return infiniteQueryOptions<
        GetVersesApiVersesGetResponse,
        AxiosError<GetVersesApiVersesGetError>,
        InfiniteData<GetVersesApiVersesGetResponse>,
        QueryKey<Options<GetVersesApiVersesGetData>>,
        | number
        | Pick<
              QueryKey<Options<GetVersesApiVersesGetData>>[0],
              'body' | 'headers' | 'path' | 'query'
          >
    >(
        // @ts-ignore
        {
            queryFn: async ({ pageParam, queryKey, signal }) => {
                // @ts-ignore
                const page: Pick<
                    QueryKey<Options<GetVersesApiVersesGetData>>[0],
                    'body' | 'headers' | 'path' | 'query'
                > =
                    typeof pageParam === 'object'
                        ? pageParam
                        : {
                              query: {
                                  page: pageParam,
                              },
                          }
                const params = createInfiniteParams(queryKey, page)
                const { data } = await getVersesApiVersesGet({
                    ...options,
                    ...params,
                    signal,
                    throwOnError: true,
                })
                return data
            },
            queryKey: getVersesApiVersesGetInfiniteQueryKey(options),
        },
    )
}
