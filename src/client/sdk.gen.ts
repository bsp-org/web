// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client'
import { client } from './client.gen'
import type {
    GetTranslationMetadataApiTranslationsTranslationIdMetadataGetData,
    GetTranslationMetadataApiTranslationsTranslationIdMetadataGetErrors,
    GetTranslationMetadataApiTranslationsTranslationIdMetadataGetResponses,
    GetTranslationsApiTranslationsGetData,
    GetTranslationsApiTranslationsGetResponses,
    GetVersesApiVersesGetData,
    GetVersesApiVersesGetErrors,
    GetVersesApiVersesGetResponses,
    HealthHealthGetData,
    HealthHealthGetResponses,
} from './types.gen'

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>
}

/**
 * Health
 */
export const healthHealthGet = <ThrowOnError extends boolean = false>(
    options?: Options<HealthHealthGetData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        HealthHealthGetResponses,
        unknown,
        ThrowOnError
    >({
        responseType: 'json',
        url: '/health',
        ...options,
    })
}

/**
 * Get Translations
 */
export const getTranslationsApiTranslationsGet = <
    ThrowOnError extends boolean = false,
>(
    options?: Options<GetTranslationsApiTranslationsGetData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetTranslationsApiTranslationsGetResponses,
        unknown,
        ThrowOnError
    >({
        responseType: 'json',
        url: '/api/translations',
        ...options,
    })
}

/**
 * Get Translation Metadata
 * Get complete metadata for a translation including:
 * - All books with their IDs, names, and display names
 * - Chapter counts per book
 * - Verse counts per chapter
 * - Total statistics
 */
export const getTranslationMetadataApiTranslationsTranslationIdMetadataGet = <
    ThrowOnError extends boolean = false,
>(
    options: Options<
        GetTranslationMetadataApiTranslationsTranslationIdMetadataGetData,
        ThrowOnError
    >,
) => {
    return (options.client ?? client).get<
        GetTranslationMetadataApiTranslationsTranslationIdMetadataGetResponses,
        GetTranslationMetadataApiTranslationsTranslationIdMetadataGetErrors,
        ThrowOnError
    >({
        responseType: 'json',
        url: '/api/translations/{translation_id}/metadata',
        ...options,
    })
}

/**
 * Get Verses
 * Unified endpoint for Bible verse retrieval with flexible filtering.
 *
 * **Features:**
 * - Text search with `q` parameter (exact or normalized matching)
 * - Point retrieval using `book`, `chapter`, `verse` parameters
 * - Range retrieval using `from_*` and `to_*` parameters
 * - Combine search with location constraints
 * - Support for multiple translations
 * - Optional match highlighting
 *
 * **Parameter Types (mutually exclusive):**
 * - Point queries: Use `book` [+ `chapter`] [+ `verse`]
 * - Range queries: Use `from_book` + `to_*` parameters
 *
 * **Examples:**
 * - Search: `/api/verses?translation_ids=eng-kjv&q=love`
 * - Single verse: `/api/verses?translation_ids=eng-kjv&book=john&chapter=3&verse=16`
 * - Full chapter: `/api/verses?translation_ids=eng-kjv&book=john&chapter=3`
 * - Full book: `/api/verses?translation_ids=eng-kjv&book=john`
 * - Verse range: `/api/verses?translation_ids=eng-kjv&from_book=john&from_chapter=3&from_verse=16&to_verse=18`
 * - Chapter range: `/api/verses?translation_ids=eng-kjv&from_book=john&from_chapter=3&to_chapter=5`
 * - Search in chapter: `/api/verses?translation_ids=eng-kjv&book=john&chapter=3&q=love`
 * - Multiple translations: `/api/verses?translation_ids=eng-kjv,spa-rvr&book=john&chapter=3&verse=16`
 */
export const getVersesApiVersesGet = <ThrowOnError extends boolean = false>(
    options: Options<GetVersesApiVersesGetData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetVersesApiVersesGetResponses,
        GetVersesApiVersesGetErrors,
        ThrowOnError
    >({
        responseType: 'json',
        url: '/api/verses',
        ...options,
    })
}
