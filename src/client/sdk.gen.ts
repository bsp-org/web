// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client'
import { client } from './client.gen'
import type {
    GetContentApiContentGetData,
    GetContentApiContentGetErrors,
    GetContentApiContentGetResponses,
    GetTranslationMetadataApiTranslationsTranslationIdMetadataGetData,
    GetTranslationMetadataApiTranslationsTranslationIdMetadataGetErrors,
    GetTranslationMetadataApiTranslationsTranslationIdMetadataGetResponses,
    GetTranslationsApiTranslationsGetData,
    GetTranslationsApiTranslationsGetResponses,
    HealthHealthGetData,
    HealthHealthGetResponses,
    SearchVersesApiSearchGetData,
    SearchVersesApiSearchGetErrors,
    SearchVersesApiSearchGetResponses,
} from './types.gen'

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>
}

/**
 * Health
 */
export const healthHealthGet = <ThrowOnError extends boolean = false>(
    options?: Options<HealthHealthGetData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        HealthHealthGetResponses,
        unknown,
        ThrowOnError
    >({
        url: '/health',
        ...options,
    })
}

/**
 * Get Translations
 */
export const getTranslationsApiTranslationsGet = <
    ThrowOnError extends boolean = false,
>(
    options?: Options<GetTranslationsApiTranslationsGetData, ThrowOnError>,
) => {
    return (options?.client ?? client).get<
        GetTranslationsApiTranslationsGetResponses,
        unknown,
        ThrowOnError
    >({
        url: '/api/translations',
        ...options,
    })
}

/**
 * Get Translation Metadata
 * Get complete metadata for a translation including:
 * - All books with their IDs, names, and display names
 * - Chapter counts per book
 * - Verse counts per chapter
 * - Total statistics
 */
export const getTranslationMetadataApiTranslationsTranslationIdMetadataGet = <
    ThrowOnError extends boolean = false,
>(
    options: Options<
        GetTranslationMetadataApiTranslationsTranslationIdMetadataGetData,
        ThrowOnError
    >,
) => {
    return (options.client ?? client).get<
        GetTranslationMetadataApiTranslationsTranslationIdMetadataGetResponses,
        GetTranslationMetadataApiTranslationsTranslationIdMetadataGetErrors,
        ThrowOnError
    >({
        url: '/api/translations/{translation_id}/metadata',
        ...options,
    })
}

/**
 * Search Verses
 */
export const searchVersesApiSearchGet = <ThrowOnError extends boolean = false>(
    options: Options<SearchVersesApiSearchGetData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        SearchVersesApiSearchGetResponses,
        SearchVersesApiSearchGetErrors,
        ThrowOnError
    >({
        url: '/api/search',
        ...options,
    })
}

/**
 * Get Content
 * Fetch Bible content with flexible range support:
 * - Single verse: start_book, start_chapter, start_verse
 * - Full chapter: start_book, start_chapter (no start_verse)
 * - Range: start_book/chapter/verse to end_book/chapter/verse
 */
export const getContentApiContentGet = <ThrowOnError extends boolean = false>(
    options: Options<GetContentApiContentGetData, ThrowOnError>,
) => {
    return (options.client ?? client).get<
        GetContentApiContentGetResponses,
        GetContentApiContentGetErrors,
        ThrowOnError
    >({
        url: '/api/content',
        ...options,
    })
}
